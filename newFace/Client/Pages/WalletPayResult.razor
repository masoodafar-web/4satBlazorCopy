@layout ShopLayout
@page "/WalletCharge"
@using System.Net
@using System.Security.Claims
@using Microsoft.AspNetCore.Mvc.Rendering
@using newFace.Shared.Models.Education
@using newFace.Shared.Models.Resource
@using System.Net.Http.Json
@using Microsoft.AspNetCore.WebUtilities
@using newFace.Shared
@using newFace.Shared.Models.Financial
@using newFace.Shared.Models.ViewModels
@inject HttpClient Http
@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation
@inject MyService MyService

@if (Model != null)
{
    <div class="container">


        <div class="row mt-5">


            @if (Model.Status == 0)
            {
                <div class="col-md-9 mx-md-auto col-12">
                    <div class="alert alert-danger w100 text-center font-weight-bold">پرداخت ناموفق</div>
                    <div class="panel-body">
                        <table class="table table-bordered">
                            <tr>
                                <th>
                                    تاریخ ثبت
                                </th>
                                <td>
                                    @Model.CDate.MiladiToJalali()
                                </td>

                            </tr>

                            <tr>
                                <th>
                                    مبلغ
                                </th>
                                <td>
                                    @string.Format("{0:N0}", Model.TotalPrice)
                                </td>

                            </tr>
                            <tr>
                                <th>
                                    نوع پرداخت
                                </th>
                                <td>
                                    @{
                                        string type = Model.BillType == BillType.Credit ? "پرداخت از اعتبار کیف پول " : "پرداخت از طریق درگاه بانک";
                                    }
                                    @type
                                </td>

                            </tr>
                            <tr>
                                <th>
                                    وضعیت پرداخت
                                </th>
                                <td>
                                    <span class="text-danger"><b>پرداخت ناموفق</b></span>
                                </td>

                            </tr>
                        </table>
                    </div>
                </div>
            }
            else
            {
                <div class="col-md-9 mx-md-auto col-12">
                    <div class="alert alert-success w-100 text-center font-weight-bold">پرداخت موفق</div>
                    <div class="panel-body">
                        <table class="table table-bordered">
                            <tr>
                                <th>
                                    تاریخ ثبت
                                </th>
                                <td>
                                    @Model.CDate.MiladiToJalali()
                                </td>

                            </tr>

                            <tr>
                                <th>
                                    مبلغ
                                </th>
                                <td>
                                    @string.Format("{0:N0}", Model.TotalPrice)
                                </td>

                            </tr>
                            <tr>
                                <th>
                                    نوع پرداخت
                                </th>
                                <td>
                                    @{
                                        string type = Model.BillType == BillType.Credit ? "پرداخت از اعتبار کیف پول " : "پرداخت از طریق درگاه بانک";
                                    }
                                    @type
                                </td>

                            </tr>
                            <tr>
                                <th>
                                    شماره پیگیری
                                </th>
                                <td>
                                    @Model.RefId
                                </td>

                            </tr>
                            <tr>
                                <th>
                                    وضعیت پرداخت
                                </th>
                                <td>
                                    <span class="text-success"><b>پرداخت موفق</b></span>
                                </td>

                            </tr>
                        </table>

                    </div>
                </div>
            }
            <div class="col-9 mx-auto row justify-content-between">
                @if ((Enums.ReturnFrom)ReturnFrom == Enums.ReturnFrom.Application)
                {
                    <a href="intent://www.4satt.com#Intent;scheme=https;action=action_buy;end" class="btn btn-primary col-12">بازگشت به اپلیکیشن</a>
                }
                else
                {
                    <a href="/MyWallet" class="btn btn-primary col-md-5 mx-md-auto col-6">بازگشت به کیف پول</a>
                    <a href="/shopCart" class="btn btn-primary col-md-5 mx-md-auto col-6">بازگشت به سبد خرید</a>

                }
            </div>

        </div>
       
    </div>

}
else
{
    <Spinner />

}
@code
{
    public string Status;
    public string Authority;
    public string FactorId;
    public string TotalPrice;

    [Parameter]
    public int ReturnFrom { get; set; }


    private bool _IsMobileDevice;
    private Bill Model;

    [CascadingParameter]
    protected Task<AuthenticationState> AuthState { get; set; }
    protected override async Task OnInitializedAsync()
    {

        _IsMobileDevice =
            await JSRuntime.InvokeAsync<bool>("isMobileDevice");
        StateHasChanged();
        ///{ factorid}/{ totalprice}/{ returnfrom: int}/{ authority}/{ status}
        var uri = Navigation.ToAbsoluteUri(Navigation.Uri);
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("status", out var _status))
        {
            Status = _status.ToString();
        }
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("authority", out var _authority))
        {
            Authority = _authority.ToString();
        }
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("factorid", out var _factorid))
        {
            FactorId = _factorid.ToString();
        }
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("totalprice", out var _totalprice))
        {
            TotalPrice = _totalprice.ToString();
        }


        ClaimsPrincipal user = (await AuthState).User;

        if (user.Identity.IsAuthenticated)
        {
            var SecurityStamp = user.FindFirst("SecurityStamp");

            var requestPayResult = new RequestPayResult { Token = SecurityStamp.Value, Authority = Authority, FactorId = FactorId, TotalPrice = TotalPrice, Status = Status };

            var result = await Http.PostAsJsonAsync("api/CreditChargeResult", requestPayResult);
            if (result.StatusCode == HttpStatusCode.OK)
            {

                var resultPayResult = result.Content.ReadFromJsonAsync<ResultPayResult>().Result;
                if (resultPayResult.Statue == Enums.Statue.Success)
                {
                    WebAlert.alert(resultPayResult.Message, "success", true);
                    Task.Delay(5000).ContinueWith(t => WebAlert.alert(resultPayResult.Message));
                    Model = resultPayResult.Bill;
                    MyService.CallRequestRefresh();
                    StateHasChanged();
                }
                else
                {
                    WebAlert.alert(resultPayResult.Message, "danger", true);
                    Task.Delay(5000).ContinueWith(t => WebAlert.alert(resultPayResult.Message));
                    Model = resultPayResult.Bill;
                    MyService.CallRequestRefresh();
                    StateHasChanged();
                }

            }

        }
    }
}
